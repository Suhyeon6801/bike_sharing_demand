# -*- coding: utf-8 -*-
"""bike sharing(Demand Prediction).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rACAPfM2AoLG7Dto6gVwVBmf8c8xyyZt
"""

from google.colab import files
files.upload()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# %matplotlib inline
plt.style.use('ggplot')
mpl.rcParams['axes.unicode_minus']=False

train=pd.read_csv("./train.csv", parse_dates=["datetime"])
train.shape

train.info()

train.head()

train.describe()

train.isnull().sum()

train["year"] = train["datetime"].dt.year
train["month"] = train["datetime"].dt.month
train["day"] = train["datetime"].dt.day
train["hour"] = train["datetime"].dt.hour
train["minute"] = train["datetime"].dt.minute
train["second"] = train["datetime"].dt.second
train.shape

train.groupby(["month"]).mean()

figure, ((ax1,ax2,ax3),(ax4,ax5,ax6)) = plt.subplots(nrows=2,ncols=3)
figure.set_size_inches(20,15)
sns.barplot(data=train, x="year",y="count", ax=ax1)
sns.barplot(data=train, x="month", y="count", ax=ax2)
sns.barplot(data=train, x="day", y="count", ax=ax3)
sns.barplot(data=train, x="hour", y="count", ax=ax4)
sns.barplot(data=train, x="minute", y="count", ax=ax5)
sns.barplot(data=train, x="second", y="count", ax=ax6)

ax1.set(ylabel='Count',title="yearly amount rental")
ax2.set(xlabel='month', title="monthly")
ax3.set(xlabel='day', title="daily")
ax4.set(xlabel='hour',title="hourly")

fig, axes = plt.subplots(nrows=2, ncols=2)
fig.set_size_inches(12,10)
sns.boxplot(data=train, y="count", orient="v", ax=axes[0][0])
sns.boxplot(data=train, y="count", x="season",orient="v", ax=axes[0][1])
sns.boxplot(data=train, y="count", x="hour", orient="v",ax=axes[1][0])
sns.boxplot(data=train, y="count", x="workingday", orient="v",ax=axes[1][1])

axes[0][0].set(ylabel='Count')
axes[0][1].set(xlabel='Season', ylabel='Count')
axes[1][0].set(xlabel='Hour Of The Day', ylabel='Count')
axes[1][1].set(xlabel='Working Day', ylabel='Count')

train["dayofweek"] = train["datetime"].dt.dayofweek
train.shape

train["dayofweek"].value_counts()

fig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(nrows=5)
fig.set_size_inches(18,25)

sns.pointplot(data=train, x="hour", y="count", ax=ax1)
sns.pointplot(data=train, x="hour", y="count", hue="workingday", ax=ax2)
sns.pointplot(data=train, x="hour", y="count", hue="dayofweek", ax=ax3)
sns.pointplot(data=train, x="hour", y="count", hue="weather", ax=ax4)
sns.pointplot(data=train, x="hour", y="count", hue="season", ax=ax5)

corrMatt=train[["temp", "atemp","casual","registered", "humidity","windspeed","count"]]
corrMatt=corrMatt.corr()
print(corrMatt)

mask=np.array(corrMatt)
mask[np.tril_indices_from(mask)] = False

fig, ax=plt.subplots()
fig.set_size_inches(20,10)
sns.heatmap(corrMatt, mask=mask, vmax=.8, square=True, annot=True)

fig, (ax1, ax2, ax3)=plt.subplots(ncols=3)
fig.set_size_inches(12,5)
sns.regplot(x="temp", y="count", data=train, ax=ax1)
sns.regplot(x="windspeed", y="count", data=train, ax=ax2)
sns.regplot(x="humidity", y="count", data=train, ax=ax3)

def concatenate_year_month(datetime):
  return "{0}-{1}".format(datetime.year, datetime.month)

train["year_month"] = train["datetime"].apply(concatenate_year_month)
print(train.shape)
train[["datetime", "year_month"]].head()

fig, [ax1, ax2] = plt.subplots(nrows=1, ncols=2)
fig.set_size_inches(18,4)

sns.barplot(data=train, x="year", y="count", ax=ax1)
sns.barplot(data=train, x="month", y="count", ax=ax2)

fig, ax3 = plt.subplots(nrows=1, ncols=1)
fig.set_size_inches(18,4)

sns.barplot(data=train, x="year_month", y="count", ax=ax3)

trainWithoutOutliers = train[np.abs(train["count"] - train["count"].mean()) <= (3*train["count"].std())]

print(train.shape)
print(trainWithoutOutliers.shape)

figure, axes=plt.subplots(ncols=1, nrows=2)
figure.set_size_inches(12,10)

sns.distplot(train["count"], ax=axes[0])
sns.distplot(np.log(trainWithoutOutliers["count"]), ax=axes[1])

